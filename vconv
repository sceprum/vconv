#!/usr/bin/env python3
from pathlib import Path
from argparse import ArgumentParser
import subprocess
import sys
import os

DEFAULT_ARGS = '-n -vcodec libx264 -preset slow -crf {crf} ' \
               '-c:a aac -b:a 128k'


def convert_file(src, dest, crf, additional_args=None):
    args = ['ffmpeg', '-i', str(src)]

    args.extend(
        DEFAULT_ARGS.format(crf=crf).split(' ')
    )

    if additional_args:
        args.append(additional_args)
    if os.path.isdir(dest):
        dest = Path(dest, Path(src).name)
    args.append(dest)
    print('Executing command:', ' '.join(args))
    subprocess.run(args)


def build_parser():
    parser = ArgumentParser()
    parser.add_argument('source', nargs='+')
    parser.add_argument('destination')
    parser.add_argument('-crf', type=int, default=33)
    return parser


def convert_files(source_files, args):
    if len(source_files) == 1:
        source_path = Path(source_files[0])
        if source_path.is_dir():
            convert_entire_dir(args)
        elif source_path.is_file():
            convert_file(source_path, cmd_args.destination, cmd_args.crf, remaining)
        return
    if not Path(args.destination).is_dir():
        print('Destination path is not a directory')
        return
    for f in source_files:
        dest = Path(args.destination, Path(f).name)
        print(f'{f} -> {dest}')
        convert_file(f, dest, args.crf)


def convert_entire_dir(args):
    return convert_files(Path(args.source).glob('*.mp4'), args)


def convert_by_pattern(args):
    source = Path(args.source)
    parent = Path(source.parent)
    if not parent.exists():
        print(f'{parent} is not exists')
        return
    convert_files(parent.glob(source.name), args)


if __name__ == '__main__':
    parser = build_parser()
    cmd_args, remaining = parser.parse_known_args()
    source = cmd_args.source
    convert_files(source, cmd_args)
